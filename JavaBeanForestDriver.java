// Ruben Navarro
// Date: 03/30/2019
// COP3252
// Assignment 5
// JavaBeanForestDriver.java

import java.util.Random;
import java.util.Scanner;
import java.util.ArrayList;

public class JavaBeanForestDriver {

public static void main(String[] args) throws InvalidDamageException {

    String choice = ""; // variable to hold selection to restart game
    do {

    int selection = 0;                            // variable to hold user choice
    ArrayList<Enemy> e = new ArrayList<Enemy>();  // array to hold enemy objects
    boolean flag = false;                         // boolean for proper exiting after battle ends
    Random rnum = new Random();                   // random generator object
    Scanner input = new Scanner(System.in);       // input object

    // call to construct Knight object
    Knight k = new Knight(0, "", "", "");


    // Displays welcome message
    System.out.println("\n  o_0 0_o   WELCOME TO JAVA BEAN FOREST!  o_0 0_o   \n");
    System.out.println("  Beware! you are not alone in this forest.\n  It's inhabited by Trolls, Sorcerers, Ogres, and Orcs.");
    System.out.println("  Tread carefully. You've been warned.\n\n");

    System.out.println("  Before we start the journey, let's get to know your Knight\n");
    System.out.println("  What is the name of your Knight? ");

    String name = input.nextLine(); // obtains knights name

    // exception to ensure string is not null
    if (name == null)
        throw new IllegalArgumentException("The argument cannot be null");

    // sets the knights name with user provided input
    k.setKName(name);

    do {
        // asks user for the type of armor their knight will be wearing
        System.out.printf("  What type of Armor will %s be wearing? \n", k.getKName());
        System.out.println("\n 1. Plate\n 2. Chainmail\n 3. Leather\n");
        System.out.println(" Please select between 1 and 3: ");
        selection = input.nextInt();
    } while (selection < 0 && selection > 3);

    // sets knight armor based on what user chooses
    switch (selection) {
        case 1:
            k.setKArmor("Plate");
            break;
        case 2:
            k.setKArmor("Chainmail");
            break;
        case 3:
            k.setKArmor("Leather");
            break;
    }

    do {
        // asks user for the type of weapon their knight will be wielding
        System.out.printf("  What type of Weapon will %s be wielding? \n", k.getKName());
        System.out.println("\n 1. 2Handed Sword \n 2. 2Handed Mace\n 3. 1Handed Mace and Shield\n 4. 1Handed Sword and Shield\n");
        System.out.println(" Please select between 1 and 4: ");
        selection = input.nextInt();
    } while (selection < 0 && selection > 4);

    // sets knight weapon based on what the user chooses
    switch (selection) {
        case 1:
            k.setKWeapon("2Handed Sword");
            break;
        case 2:
            k.setKWeapon("2Handed Mace");
            break;
        case 3:
            k.setKWeapon("1Handed Mace and Shield");
            break;
        case 4:
            k.setKWeapon("1Handed Sword and Shield");
            break;
    }

    // Auto generates the knights health
    System.out.printf("\n\n %s's health will be autogenerated\n", k.getKName());
    int num = rnum.nextInt(100 - 75 + 1) + 75;
    k.setKHealth(num);

    // display message that knight assends into the woods
    System.out.printf("\n %s begins ascending through the Java Bean Forest\n", k.getKName());
    System.out.println("\n *** Rustle *** \n *** Rustle ***\n *** Rustle *** \n *** Rustle ***\n");

    num = 0;
    do {
        System.out.println("\n You can't believe your eyes! you see .... (please enter a number between 1 and 3 for the number of enemies you see): ");
        num = input.nextInt();
    } while (num < 1 || num > 3);

    if (num == 1)
        System.out.printf("%d enemy!!!\n\n", num);
    else
        System.out.printf("%d enemies!!!\n\n", num);

    // if there is one enemy, print out message to announce type of enemy
    if (num == 1)
        System.out.println("\n An enemy leaps out of the bushes!!!\n\n IT'S A ... \n");
    else if (num > 1) // if there is more than one enemy displays message to announce multiple enemies
        System.out.printf("\n %d enemies leap out of the bushes!!!\n\n IT APPEARS TO BE ... A\n\n ", num);

    int i = 0;
    // randomly selects an enemy and adds them to array of objects
    while (i < num) {
        e.add(Enemy.getRandomEnemy());
        ++i;
    }
    i = 0;
    // loop through the array of objects
    for (int x = 0; x < e.size(); ++x) {

        // if there is only one enemy, perform following task
        if (num == 1) {
            // displays enemy knight will be facing
            System.out.println(e.get(x).toString());

            // displays message
            System.out.printf("\n You gather your senses and proceed to attack before the %s gets a chance to.\n", e.get(x).toString());

            // displays initial stats for the monster and the knight
            displayInitialStats(k, e);

            // dislay message to start battle
            System.out.println("\n THE BATTLE BEGINS!\n");

            do {
                int kHit = 0; // variable to hold knight damage
                int eHit = 0; // variable to hold enemy damage

                // if the knight is using a 2handed sword, generates random hit, deducts from enemy health,
                // generates enemy hit, and deduct from knight health. While exception handling for negative damage
                if (k.getKWeapon() == "2Handed Sword") {
                    kHit = rnum.nextInt(12);
                    e.get(x).setEnemyHealth(e.get(x).getEnemyHealth() - kHit);

                    e.get(x).takeDamage(kHit);

                    if (kHit > e.get(x).getEnemyHealth()) {
                        e.get(x).setEnemyHealth(0);
                    }

                    eHit = e.get(x).fight();
                    k.setKHealth(k.getKHealth() - eHit);

                    k.takeDamage(eHit);

                    if (eHit > k.getKHealth()) {
                        k.setKHealth(0);
                    }
                    // if the knight is using a 2handed mace, generates random hit, deducts from enemy health,
                    // generates enemy hit, and deduct from knight health. While exception handling for negative damage
                } else if (k.getKWeapon() == "2Handed Mace") {
                    kHit = rnum.nextInt(10);
                    e.get(x).setEnemyHealth(e.get(x).getEnemyHealth() - kHit);

                    e.get(x).takeDamage(kHit);

                    if (kHit > e.get(x).getEnemyHealth()) {
                        e.get(x).setEnemyHealth(0);
                    }

                    eHit = e.get(x).fight();
                    k.setKHealth(k.getKHealth() - eHit);

                    k.takeDamage(eHit);

                    if (eHit > k.getKHealth()) {
                        k.setKHealth(0);
                    }
                    // if the knight is using a 1handed mace and shield, generates random hit, deducts from enemy health,
                    // generates enemy hit, and deduct from knight health. While exception handling for negative damage
                } else if (k.getKWeapon() == "1Handed Mace and Shield") {
                    kHit = rnum.nextInt(6);
                    e.get(x).setEnemyHealth(e.get(x).getEnemyHealth() - kHit);

                    e.get(x).takeDamage(kHit);

                    if (kHit > e.get(x).getEnemyHealth()) {
                        e.get(x).setEnemyHealth(0);
                    }

                    eHit = e.get(x).fight();
                    k.setKHealth(k.getKHealth() - (eHit - 2));

                    k.takeDamage(eHit);

                    if (eHit > k.getKHealth()) {
                        k.setKHealth(0);
                    }
                    // if the knight is using a 1handed sword and shield, generates random hit, deducts from enemy health,
                    // generates enemy hit, and deduct from knight health. While exception handling for negative damage
                } else if (k.getKWeapon() == "1Handed Sword and Shield") {
                    kHit = rnum.nextInt(8);
                    e.get(x).setEnemyHealth(e.get(x).getEnemyHealth() - kHit);

                    e.get(x).takeDamage(kHit);

                    if (kHit > e.get(x).getEnemyHealth()) {
                        e.get(x).setEnemyHealth(0);
                    }

                    eHit = e.get(x).fight();
                    k.setKHealth(k.getKHealth() - (eHit - 2));

                    k.takeDamage(eHit);

                    if (eHit > k.getKHealth()) {
                        k.setKHealth(0);
                    }
                }
                // displays fight statistics
                displayFight(k, e, kHit, eHit, x);

                // displays message when knight wins or loses battle
                if (k.getKHealth() <= 0)
                    System.out.printf("\n %s HAS LOST THE BATTLE!\n", k.getKName());
                else if (e.get(x).getEnemyHealth() <= 0)
                    System.out.printf("\n %s HAS WON THE BATTLE!\n", k.getKName());

                // if knight or enemy health is not above 0, moves on to next fight round
            } while (k.getKHealth() > 0 && e.get(x).getEnemyHealth() > 0);
            break;
            // process for multiple enemies
        } else {
            // prints out the types of monsters the knight will be facing
            while (i < num) {
                System.out.println(e.get(i).toString());
                if (i != num - 1) {
                    System.out.println("\n along with a\n ");
                }
                ++i;
            }
            // displays pre fight message
            System.out.printf("\n You gather your senses and proceed to attack before the Monsters get a chance to.\n", e.get(x).toString());

            // displays initial stats for knight and monsters
            displayInitialStats(k, e);

            // displays message for start of battle
            System.out.println("\n THE BATTLE BEGINS!\n");

            do {
                int kHit = 0; // variable to hold knight damage
                int eHit = 0; // variable to hold enemy damage

                // if the knight is using a 2handed sword, generates random hit, deducts from enemy health,
                // generates enemy hit, and deduct from knight health. While exception handling for negative damage
                if (k.getKWeapon() == "2Handed Sword") {
                    kHit = rnum.nextInt(12);
                    e.get(x).setEnemyHealth(e.get(x).getEnemyHealth() - kHit);

                    e.get(x).takeDamage(kHit);

                    if (kHit > e.get(x).getEnemyHealth()) {
                        e.get(x).setEnemyHealth(0);
                    }

                    eHit = e.get(x).fight();
                    k.setKHealth(k.getKHealth() - eHit);

                    k.takeDamage(eHit);

                    if (eHit > k.getKHealth()) {
                        k.setKHealth(0);
                    }
                    // if the knight is using a 2handed mace, generates random hit, deducts from enemy health,
                    // generates enemy hit, and deduct from knight health. While exception handling for negative damage
                } else if (k.getKWeapon() == "2Handed Mace") {
                    kHit = rnum.nextInt(10);
                    e.get(x).setEnemyHealth(e.get(x).getEnemyHealth() - kHit);

                    e.get(x).takeDamage(kHit);

                    if (kHit > e.get(x).getEnemyHealth()) {
                        e.get(x).setEnemyHealth(0);
                    }

                    eHit = e.get(x).fight();
                    k.setKHealth(k.getKHealth() - eHit);

                    k.takeDamage(eHit);

                    if (eHit > k.getKHealth()) {
                        k.setKHealth(0);
                    }
                    // if the knight is using a 1handed mace and shield, generates random hit, deducts from enemy health,
                    // generates enemy hit, and deduct from knight health. While exception handling for negative damage
                } else if (k.getKWeapon() == "1Handed Mace and Shield") {
                    kHit = rnum.nextInt(6);
                    e.get(x).setEnemyHealth(e.get(x).getEnemyHealth() - kHit);

                    e.get(x).takeDamage(kHit);

                    if (kHit > e.get(x).getEnemyHealth()) {
                        e.get(x).setEnemyHealth(0);
                    }

                    eHit = e.get(x).fight();
                    k.setKHealth(k.getKHealth() - (eHit - 2));

                    k.takeDamage(eHit);

                    if (eHit > k.getKHealth()) {
                        k.setKHealth(0);
                    }
                    // if the knight is using a 1handed sword and shield, generates random hit, deducts from enemy health,
                    // generates enemy hit, and deduct from knight health. While exception handling for negative damage
                } else if (k.getKWeapon() == "1Handed Sword and Shield") {
                    kHit = rnum.nextInt(8);
                    e.get(x).setEnemyHealth(e.get(x).getEnemyHealth() - kHit);

                    e.get(x).takeDamage(kHit);

                    if (kHit > e.get(x).getEnemyHealth()) {
                        e.get(x).setEnemyHealth(0);
                    }

                    eHit = e.get(x).fight();
                    k.setKHealth(k.getKHealth() - (eHit - 2));

                    k.takeDamage(eHit);

                    if (eHit > k.getKHealth()) {
                        k.setKHealth(0);
                    }
                }
                // displays fight statistics
                displayFight(k, e, kHit, eHit, x);

                // displays message for when knight wins or loses
                if (k.getKHealth() <= 0) {
                    System.out.printf("\n %s HAS LOST THE BATTLE!\n", k.getKName());
                    flag = true; // sets flag to true for breaking purposes
                    break;
                } else if (e.get(x).getEnemyHealth() <= 0) {
                    System.out.printf("\n %s HAS WON THE BATTLE!\n", k.getKName());
                }

            } while (k.getKHealth() > 0 && e.get(x).getEnemyHealth() > 0);
            // breaks out of loop if the knight has lost
            if (flag == true)
                break;
        }
    }
    // Ask user if they would like to replay the game or exit
    System.out.println("\nWould you like to play again or would you like to quit? (Enter n or N to exit)\n");
    choice = input.next();

// continues playing game if user input is not n or N
} while (!(choice.equals("n") || choice.equals("N")));

    // displays goodbye message
    System.out.println("\nThanks for playing!!!\n\n");

}
    // function to display fight between characters and end of the round stats
    private static void displayFight(Knight k1, ArrayList<Enemy> e1, int kh, int eh, int c) {

        System.out.println("\n ###### CLASH! ######\n");
        System.out.printf(" %s delivers a blow to %s with his %s for %d\n", k1.getKName(), e1.get(c).toString(), k1.getKWeapon(), kh);
        System.out.printf(" %s delivers a blow to %s with its %s for %d\n\n", e1.get(c).toString(),  k1.getKName(), e1.get(c).getEnemyWeapon(), eh);
        System.out.printf(" ######################\n\n");
        System.out.printf("\n ###### END OF THE ROUND STATS ######\n");
        System.out.printf(" %s Health: %d\n", k1.getKName(), k1.getKHealth());
        System.out.printf(" %s Health: %d\n", e1.get(c).toString(), e1.get(c).getEnemyHealth());
        System.out.printf(" ######################\n");

    }
    // displays initial states for knight and monsters
    private static void displayInitialStats(Knight k1, ArrayList<Enemy> e1) {

        System.out.println("\n ---------- Player Stats ----------\n");
        System.out.printf("    Knight Name: %s\n", k1.getKName());
        System.out.printf("    Knight Health: %s\n", k1.getKHealth());
        System.out.printf("    Knight Weapon: %s\n", k1.getKWeapon());
        System.out.printf("    Knight Armor: %s\n", k1.getKArmor());
        System.out.println("  ----------------------------------\n");

        for (int i = 0; i < e1.size(); ++i) {
            System.out.println(" ---------- Monster stats ----------\n");
            System.out.printf("    Monster Name: %s\n", e1.get(i).toString());
            System.out.printf("    Monster Health: %s\n", e1.get(i).getEnemyHealth());
            System.out.printf("    Monster Weapon: %s\n", e1.get(i).getEnemyWeapon());
            System.out.printf("    Monster Armor: %s\n", e1.get(i).getEnemyArmor());
            System.out.println("  ----------------------------------\n");
        }
    }
}


